// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "sleep_service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sofa {
namespace pbrpc {
namespace test {

namespace {

const ::google::protobuf::Descriptor* SleepRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SleepRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SleepResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SleepResponse_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* SleepServer_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_sleep_5fservice_2eproto() {
  protobuf_AddDesc_sleep_5fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "sleep_service.proto");
  GOOGLE_CHECK(file != NULL);
  SleepRequest_descriptor_ = file->message_type(0);
  static const int SleepRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepRequest, sleep_time_),
  };
  SleepRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SleepRequest_descriptor_,
      SleepRequest::default_instance_,
      SleepRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SleepRequest));
  SleepResponse_descriptor_ = file->message_type(1);
  static const int SleepResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepResponse, message_),
  };
  SleepResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SleepResponse_descriptor_,
      SleepResponse::default_instance_,
      SleepResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SleepResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SleepResponse));
  SleepServer_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_sleep_5fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SleepRequest_descriptor_, &SleepRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SleepResponse_descriptor_, &SleepResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_sleep_5fservice_2eproto() {
  delete SleepRequest::default_instance_;
  delete SleepRequest_reflection_;
  delete SleepResponse::default_instance_;
  delete SleepResponse_reflection_;
}

void protobuf_AddDesc_sleep_5fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::sofa::pbrpc::protobuf_AddDesc_sofa_2fpbrpc_2frpc_5foption_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023sleep_service.proto\022\017sofa.pbrpc.test\032\033"
    "sofa/pbrpc/rpc_option.proto\"\"\n\014SleepRequ"
    "est\022\022\n\nsleep_time\030\001 \002(\005\" \n\rSleepResponse"
    "\022\017\n\007message\030\001 \002(\t2\316\001\n\013SleepServer\022X\n\027Sle"
    "epWithServiceTimeout\022\035.sofa.pbrpc.test.S"
    "leepRequest\032\036.sofa.pbrpc.test.SleepRespo"
    "nse\022^\n\026SleepWithMethodTimeout\022\035.sofa.pbr"
    "pc.test.SleepRequest\032\036.sofa.pbrpc.test.S"
    "leepResponse\"\005\200\342\t\240\037\032\005\200\342\t\320\017B\003\200\001\001", 351);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "sleep_service.proto", &protobuf_RegisterTypes);
  SleepRequest::default_instance_ = new SleepRequest();
  SleepResponse::default_instance_ = new SleepResponse();
  SleepRequest::default_instance_->InitAsDefaultInstance();
  SleepResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_sleep_5fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_sleep_5fservice_2eproto {
  StaticDescriptorInitializer_sleep_5fservice_2eproto() {
    protobuf_AddDesc_sleep_5fservice_2eproto();
  }
} static_descriptor_initializer_sleep_5fservice_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int SleepRequest::kSleepTimeFieldNumber;
#endif  // !_MSC_VER

SleepRequest::SleepRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SleepRequest::InitAsDefaultInstance() {
}

SleepRequest::SleepRequest(const SleepRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SleepRequest::SharedCtor() {
  _cached_size_ = 0;
  sleep_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SleepRequest::~SleepRequest() {
  SharedDtor();
}

void SleepRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SleepRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SleepRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SleepRequest_descriptor_;
}

const SleepRequest& SleepRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sleep_5fservice_2eproto();  return *default_instance_;
}

SleepRequest* SleepRequest::default_instance_ = NULL;

SleepRequest* SleepRequest::New() const {
  return new SleepRequest;
}

void SleepRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sleep_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SleepRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 sleep_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sleep_time_)));
          set_has_sleep_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SleepRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 sleep_time = 1;
  if (has_sleep_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sleep_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SleepRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 sleep_time = 1;
  if (has_sleep_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sleep_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SleepRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 sleep_time = 1;
    if (has_sleep_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sleep_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SleepRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SleepRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SleepRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SleepRequest::MergeFrom(const SleepRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sleep_time()) {
      set_sleep_time(from.sleep_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SleepRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SleepRequest::CopyFrom(const SleepRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SleepRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SleepRequest::Swap(SleepRequest* other) {
  if (other != this) {
    std::swap(sleep_time_, other->sleep_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SleepRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SleepRequest_descriptor_;
  metadata.reflection = SleepRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SleepResponse::kMessageFieldNumber;
#endif  // !_MSC_VER

SleepResponse::SleepResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SleepResponse::InitAsDefaultInstance() {
}

SleepResponse::SleepResponse(const SleepResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SleepResponse::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SleepResponse::~SleepResponse() {
  SharedDtor();
}

void SleepResponse::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void SleepResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SleepResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SleepResponse_descriptor_;
}

const SleepResponse& SleepResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_sleep_5fservice_2eproto();  return *default_instance_;
}

SleepResponse* SleepResponse::default_instance_ = NULL;

SleepResponse* SleepResponse::New() const {
  return new SleepResponse;
}

void SleepResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SleepResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SleepResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SleepResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SleepResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SleepResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SleepResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SleepResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SleepResponse::MergeFrom(const SleepResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SleepResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SleepResponse::CopyFrom(const SleepResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SleepResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SleepResponse::Swap(SleepResponse* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SleepResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SleepResponse_descriptor_;
  metadata.reflection = SleepResponse_reflection_;
  return metadata;
}


// ===================================================================

SleepServer::~SleepServer() {}

const ::google::protobuf::ServiceDescriptor* SleepServer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SleepServer_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* SleepServer::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return SleepServer_descriptor_;
}

void SleepServer::SleepWithServiceTimeout(::google::protobuf::RpcController* controller,
                         const ::sofa::pbrpc::test::SleepRequest*,
                         ::sofa::pbrpc::test::SleepResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SleepWithServiceTimeout() not implemented.");
  done->Run();
}

void SleepServer::SleepWithMethodTimeout(::google::protobuf::RpcController* controller,
                         const ::sofa::pbrpc::test::SleepRequest*,
                         ::sofa::pbrpc::test::SleepResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method SleepWithMethodTimeout() not implemented.");
  done->Run();
}

void SleepServer::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), SleepServer_descriptor_);
  switch(method->index()) {
    case 0:
      SleepWithServiceTimeout(controller,
             ::google::protobuf::down_cast<const ::sofa::pbrpc::test::SleepRequest*>(request),
             ::google::protobuf::down_cast< ::sofa::pbrpc::test::SleepResponse*>(response),
             done);
      break;
    case 1:
      SleepWithMethodTimeout(controller,
             ::google::protobuf::down_cast<const ::sofa::pbrpc::test::SleepRequest*>(request),
             ::google::protobuf::down_cast< ::sofa::pbrpc::test::SleepResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& SleepServer::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sofa::pbrpc::test::SleepRequest::default_instance();
    case 1:
      return ::sofa::pbrpc::test::SleepRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& SleepServer::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::sofa::pbrpc::test::SleepResponse::default_instance();
    case 1:
      return ::sofa::pbrpc::test::SleepResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

SleepServer_Stub::SleepServer_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
SleepServer_Stub::SleepServer_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
SleepServer_Stub::~SleepServer_Stub() {
  if (owns_channel_) delete channel_;
}

void SleepServer_Stub::SleepWithServiceTimeout(::google::protobuf::RpcController* controller,
                              const ::sofa::pbrpc::test::SleepRequest* request,
                              ::sofa::pbrpc::test::SleepResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void SleepServer_Stub::SleepWithMethodTimeout(::google::protobuf::RpcController* controller,
                              const ::sofa::pbrpc::test::SleepRequest* request,
                              ::sofa::pbrpc::test::SleepResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace pbrpc
}  // namespace sofa

// @@protoc_insertion_point(global_scope)
